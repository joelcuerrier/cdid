data=data0,
panel=TRUE,
allow_unbalanced_panel=TRUE,
control_group="notyettreated",
anticipation=0,
weightsname="S",
alp=0.05,
bstrap=TRUE,
biters=1000,
clustervars=NULL,
cband=TRUE,
est_method="2-step",
base_period="varying",
print_details=FALSE,
pl=FALSE,
cores=1,
call=match.call())
result = gmm_compute_delta_att(dp)
devtools::build()
#remotes::install_github("joelcuerrier/cdid", ref = "main", build_vignettes = TRUE, force = TRUE)
#Load the relevant packages
library(did) #Callaway and Sant'Anna (2021)
#library(cdid) #Bellego, Benatia, and Dortet-Bernadet (2024)
#to test functions before
devtools::load_all(".")
#update docs
library(roxygen2)
roxygenise()
#verify
devtools::document()
#devtools::build_vignettes()
devtools::build()
#remotes::install_github("joelcuerrier/cdid", ref = "main", build_vignettes = TRUE, force = TRUE)
#Load the relevant packages
library(did) #Callaway and Sant'Anna (2021)
#library(cdid) #Bellego, Benatia, and Dortet-Bernadet (2024)
#to test functions before
devtools::load_all(".")
#update docs
#library(roxygen2)
#roxygenise()
#verify
devtools::document()
#devtools::build_vignettes()
#devtools::build()
#devtools::check()
#devtools::install()
#devtools::check_win_devel()
set.seed(123)
#Generate a dataset: 500 units, 8 time periods, with unit fixed-effects.
# The parameter sigma_alpha controls the unit-specific time-persistent unobserved
# heterogeneity.
data0=fonction_simu_attrition(N = 500,T = 8,theta2_alpha_Gg = 0.5,
lambda1_alpha_St = 0, sigma_alpha = 2,
sigma_epsilon = 0.1, tprob = 0.5)
# The true values of the coefficients are based on time-to-treatment. The treatment
# effect is zero before the treatment, 1.75 one period after, 1.5 two period after,
# 1.25 three period after, 1 four period after, 0.75 five period after, 0.5 six
# period after, etc.
#We keep all observations, so we have a balanced dataset
data0$S <- 1
#run did
did.results = did:: att_gt(
yname="Y",
tname="date",
idname = "id",
gname = "date_G",
xformla = ~X,
data = data0,
weightsname = NULL,
allow_unbalanced_panel = FALSE,
panel = TRUE,
control_group = "notyettreated",
alp = 0.05,
bstrap = TRUE,
cband = TRUE,
biters = 1000,
clustervars = NULL,
est_method = "ipw",
base_period = "varying",
print_details = FALSE,
pl = FALSE,
cores = 1
)
dp=pre_process_cdid(yname="Y",
tname="date",
idname="id",
gname="date_G",
xformla=~1,
data=data0,
panel=TRUE,
allow_unbalanced_panel=TRUE,
control_group="notyettreated",
anticipation=0,
weightsname="S",
alp=0.05,
bstrap=TRUE,
biters=1000,
clustervars=NULL,
cband=TRUE,
est_method="2-step",
base_period="varying",
print_details=FALSE,
pl=FALSE,
cores=1,
call=match.call())
result = gmm_compute_delta_att(dp)
#remotes::install_github("joelcuerrier/cdid", ref = "main", build_vignettes = TRUE, force = TRUE)
#Load the relevant packages
library(did) #Callaway and Sant'Anna (2021)
#library(cdid) #Bellego, Benatia, and Dortet-Bernadet (2024)
#to test functions before
devtools::load_all(".")
#update docs
#library(roxygen2)
#roxygenise()
#verify
devtools::document()
#devtools::build_vignettes()
#devtools::build()
#devtools::check()
#devtools::install()
#devtools::check_win_devel()
set.seed(123)
#Generate a dataset: 500 units, 8 time periods, with unit fixed-effects.
# The parameter sigma_alpha controls the unit-specific time-persistent unobserved
# heterogeneity.
data0=fonction_simu_attrition(N = 500,T = 8,theta2_alpha_Gg = 0.5,
lambda1_alpha_St = 0, sigma_alpha = 2,
sigma_epsilon = 0.1, tprob = 0.5)
# The true values of the coefficients are based on time-to-treatment. The treatment
# effect is zero before the treatment, 1.75 one period after, 1.5 two period after,
# 1.25 three period after, 1 four period after, 0.75 five period after, 0.5 six
# period after, etc.
#We keep all observations, so we have a balanced dataset
data0$S <- 1
#run did
did.results = did:: att_gt(
yname="Y",
tname="date",
idname = "id",
gname = "date_G",
xformla = ~X,
data = data0,
weightsname = NULL,
allow_unbalanced_panel = FALSE,
panel = TRUE,
control_group = "notyettreated",
alp = 0.05,
bstrap = TRUE,
cband = TRUE,
biters = 1000,
clustervars = NULL,
est_method = "ipw",
base_period = "varying",
print_details = FALSE,
pl = FALSE,
cores = 1
)
dp=pre_process_cdid(yname="Y",
tname="date",
idname="id",
gname="date_G",
xformla=~1,
data=data0,
panel=TRUE,
allow_unbalanced_panel=TRUE,
control_group="notyettreated",
anticipation=0,
weightsname="S",
alp=0.05,
bstrap=TRUE,
biters=1000,
clustervars=NULL,
cband=TRUE,
est_method="2-step",
base_period="varying",
print_details=FALSE,
pl=FALSE,
cores=1,
call=match.call())
result = gmm_compute_delta_att(dp)
result = gmm_convert_delta_to_att(result)
# if   (result$est_method == "2-step") {
#   print(result)
#   result_gmm = gmm_convert_result(result,1)}
# result$est_method = "Identity"
# if   (result$est_method == "Identity") {
#   print(result)
#   result_id = gmm_convert_result(result,2)}
#run cdid with 2step weighting matrix
result_2step = att_gt_cdid(yname="Y", tname="date",
idname="id",
gname="date_G",
xformla=~X,
data=data0,
control_group="notyettreated",
weightsname="S",
alp=0.05,
bstrap=TRUE,
biters=1000,
clustervars=NULL,
cband=TRUE,
est_method="2-step",
base_period="varying",
print_details=FALSE,
pl=FALSE,
cores=1)
#run cdid with identity weighting matrix
result_id = att_gt_cdid(yname="Y", tname="date",
idname="id",
gname="date_G",
xformla=~X,
data=data0,
control_group="notyettreated",
weightsname="S",
alp=0.05,
bstrap=TRUE,
biters=1000,
clustervars=NULL,
cband=TRUE,
est_method="Identity",
base_period="varying",
print_details=FALSE,
pl=FALSE,
cores=1)
print(did.results)
print(result_2step)
print(result_id)
# Aggregation
agg.es.did <- did::aggte(MP = did.results, type = 'dynamic')
agg.es.2step <- did::aggte(MP = result_2step, type = 'dynamic')
agg.es.id <- did::aggte(MP = result_id, type = 'dynamic')
# Print results
agg.es.did
agg.es.2step
agg.es.id
#Generate a dataset: 500 units, 8 time periods, with unit fixed-effects (alpha)
set.seed(123)
data0=fonction_simu_attrition(N = 500,T = 8,theta2_alpha_Gg = 0.5,
lambda1_alpha_St = 0, sigma_alpha = 2,
sigma_epsilon = 0.1, tprob = 0.5)
#We discard observations based on sampling indicator S
data0 <- data0[data0$S==1,]
#run did
did.results = did:: att_gt(
yname="Y",
tname="date",
idname = "id",
gname = "date_G",
xformla = ~X,
data = data0,
weightsname = NULL,
allow_unbalanced_panel = FALSE,
panel = FALSE,
control_group = "notyettreated",
alp = 0.05,
bstrap = TRUE,
cband = TRUE,
biters = 1000,
clustervars = NULL,
est_method = "ipw",
base_period = "varying",
print_details = FALSE,
pl = FALSE,
cores = 1
)
#run cdid with 2step weighting matrix
result_2step = att_gt_cdid(yname="Y", tname="date",
idname="id",
gname="date_G",
xformla=~X,
data=data0,
control_group="notyettreated",
weightsname="S",
alp=0.05,
bstrap=TRUE,
biters=1000,
clustervars=NULL,
cband=TRUE,
est_method="2-step",
base_period="varying",
print_details=FALSE,
pl=FALSE,
cores=1)
#run cdid with identity weighting matrix
result_id = att_gt_cdid(yname="Y", tname="date",
idname="id",
gname="date_G",
xformla=~X,
data=data0,
control_group="notyettreated",
weightsname="S",
alp=0.05,
bstrap=TRUE,
biters=1000,
clustervars=NULL,
cband=TRUE,
est_method="Identity",
base_period="varying",
print_details=FALSE,
pl=FALSE,
cores=1)
print(did.results)
print(result_2step)
print(result_id)
# Aggregation
agg.es.did <- aggte(MP = did.results, type = 'dynamic')
agg.es.2step <- aggte(MP = result_2step, type = 'dynamic')
agg.es.id <- aggte(MP = result_id, type = 'dynamic')
# Print results
agg.es.did
agg.es.2step
agg.es.id
library(roxygen2)
roxygenise()
#remotes::install_github("joelcuerrier/cdid", ref = "main", build_vignettes = TRUE, force = TRUE)
#Load the relevant packages
library(did) #Callaway and Sant'Anna (2021)
#library(cdid) #Bellego, Benatia, and Dortet-Bernadet (2024)
#to test functions before
devtools::load_all(".")
#update docs
library(roxygen2)
roxygenise()
devtools::document()
#devtools::build_vignettes()
devtools::build()
devtools::check()
#run cdid with 2step weighting matrix
result_2step = att_gt_cdid(yname="Y", tname="date",
idname="id",
gname="date_G",
data=data0,
control_group="notyettreated",
weightsname="S",
alp=0.05,
bstrap=TRUE,
biters=1000,
clustervars=NULL,
cband=TRUE,
est_method="2-step",
base_period="varying",
print_details=FALSE,
pl=FALSE,
cores=1)
result_2step
remotes::install_github("joelcuerrier/cdid", ref = "main", build_vignettes = TRUE, force = TRUE)
library(cdid)
#Load the relevant packages
library(did) #Callaway and Sant'Anna (2021)
library(cdid) #Bellego, Benatia, and Dortet-Bernadet (2024)
# #to test functions before
# devtools::load_all(".")
#
# #update docs
# library(roxygen2)
# roxygenise()
#
# #verify
# devtools::document()
# #devtools::build_vignettes()
# devtools::build()
# devtools::check()
# #devtools::install()
# #devtools::check_win_devel()
set.seed(123)
#Generate a dataset: 500 units, 8 time periods, with unit fixed-effects.
# The parameter sigma_alpha controls the unit-specific time-persistent unobserved
# heterogeneity.
data0=fonction_simu_attrition(N = 500,T = 8,theta2_alpha_Gg = 0.5,
lambda1_alpha_St = 0, sigma_alpha = 2,
sigma_epsilon = 0.1, tprob = 0.5)
#We keep all observations, so we have a balanced dataset
data0$S <- 1
#run did
did.results = did:: att_gt(
yname="Y",
tname="date",
idname = "id",
gname = "date_G",
xformla = ~X,
data = data0,
weightsname = NULL,
allow_unbalanced_panel = FALSE,
panel = TRUE,
control_group = "notyettreated",
alp = 0.05,
bstrap = TRUE,
cband = TRUE,
biters = 1000,
clustervars = NULL,
est_method = "ipw",
base_period = "varying",
print_details = FALSE,
pl = FALSE,
cores = 1
)
dp=pre_process_cdid(yname="Y",
tname="date",
idname="id",
gname="date_G",
xformla=~1,
data=data0,
panel=TRUE,
allow_unbalanced_panel=TRUE,
control_group="notyettreated",
anticipation=0,
weightsname="S",
alp=0.05,
bstrap=TRUE,
biters=1000,
clustervars=NULL,
cband=TRUE,
est_method="2-step",
base_period="varying",
print_details=FALSE,
pl=FALSE,
cores=1,
call=match.call())
result = gmm_compute_delta_att(dp)
result = gmm_convert_delta_to_att(result)
# if   (result$est_method == "2-step") {
#   print(result)
#   result_gmm = gmm_convert_result(result,1)}
# result$est_method = "Identity"
# if   (result$est_method == "Identity") {
#   print(result)
#   result_id = gmm_convert_result(result,2)}
#run cdid with 2step weighting matrix
result_2step = att_gt_cdid(yname="Y", tname="date",
idname="id",
gname="date_G",
data=data0,
control_group="notyettreated",
weightsname="S",
alp=0.05,
bstrap=TRUE,
biters=1000,
clustervars=NULL,
cband=TRUE,
est_method="2-step",
base_period="varying",
print_details=FALSE,
pl=FALSE,
cores=1)
#run cdid with identity weighting matrix
result_id = att_gt_cdid(yname="Y", tname="date",
idname="id",
gname="date_G",
xformla=~X,
data=data0,
control_group="notyettreated",
weightsname="S",
alp=0.05,
bstrap=TRUE,
biters=1000,
clustervars=NULL,
cband=TRUE,
est_method="Identity",
base_period="varying",
print_details=FALSE,
pl=FALSE,
cores=1)
print(did.results)
print(result_2step)
print(result_id)
# Aggregation
agg.es.did <- did::aggte(MP = did.results, type = 'dynamic')
agg.es.2step <- did::aggte(MP = result_2step, type = 'dynamic')
agg.es.id <- did::aggte(MP = result_id, type = 'dynamic')
# Print results
agg.es.did
agg.es.2step
agg.es.id
library(roxygen2)
roxygen2::roxygenise()
help(package = "cdid")
.libPaths()
devtools::check()
devtools::document()
library(roxygen2)
roxygen2::roxygenise()
remotes::install_github("joelcuerrier/cdid", ref = "main", build_vignettes = TRUE, force = TRUE)
#Load the relevant packages
library(did) #Callaway and Sant'Anna (2021)
library(cdid) #Bellego, Benatia, and Dortet-Bernadet (2024)
# #update docs
library(roxygen2)
roxygen2::roxygenise()
#
# #verify
devtools::document()
devtools::build_vignettes()
devtools::build()
devtools::check()
vignette("cdid")
vignette(package = "cdid")
help(package = "cdid")
vignette(package = "cdid-introduction")
vignette(package = "cdid")
browseVignette(package = "cdid")
browseVignettes(package = "cdid")
browseVignettes("cdid")
remotes::install_github("joelcuerrier/cdid", ref = "main", build_vignettes = TRUE, force = TRUE)
library(roxygen2)
roxygen2::roxygenise()
devtools::document()
devtools::build_vignettes()
devtools::build()
devtools::check()
remotes::install_github("joelcuerrier/cdid", ref = "main", build_vignettes = TRUE, force = TRUE)
